import os
import io
import logging
import argparse
import traceback
import getpass
import sqlite3
from datetime import datetime

import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, Update

import tensorflow as tf

from generative_poetry.init_logging import init_logging
from generative_poetry.poetry_seeds import SeedGenerator

from generative_poetry.long_poem_generator2 import LongPoemGeneratorCore2


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('poetry_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT NOT NULL,
            topic TEXT NOT NULL,
            poem TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏—Ö–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
def add_to_history_db(user_id, topic, poem):
    conn = sqlite3.connect('poetry_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO user_history (user_id, topic, poem)
        VALUES (?, ?, ?)
    ''', (user_id, topic, poem))
    conn.commit()
    conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∏—Ö–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_history_db(user_id):
    conn = sqlite3.connect('poetry_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT topic, poem, timestamp FROM user_history
        WHERE user_id = ?
        ORDER BY timestamp DESC
    ''', (user_id,))
    history = cursor.fetchall()
    conn.close()
    return history


def get_user_id(update: Update) -> str:
    if update.message:
        user_id = str(update.message.from_user.id)
    elif update.callback_query:
        user_id = str(update.callback_query.from_user.id)
    else:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id: update –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç message –∏–ª–∏ callback_query.")
    return user_id


def render_poem_html(poem_txt):
    s = '<pre>' + poem_txt + '</pre>'
    return s


def render_error_html(error_text):
    s = '<pre>ü•µ\n' + error_text + '</pre>'
    return s


top_p = 1.00
top_k = 0
typical_p = 0.6

LIKE = '–ù—Ä–∞–≤–∏—Ç—Å—è!'
DISLIKE = '–ü–ª–æ—Ö–æ :('
NEW = '–ù–æ–≤–∞—è —Ç–µ–º–∞'
MORE = '–ï—â–µ...'
HISTORY = '–ò—Å—Ç–æ—Ä–∏—è'

last_user_poems = dict()
last_user_poem = dict()
user_format = dict()


def start(update, context) -> None:
    user_id = get_user_id(update)
    logging.debug('Entering START callback with user_id=%s', user_id)

    # –°–±—Ä–æ—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º
    seed_generator.restart_user_session(user_id)

    intro_text = "–ü—Ä–∏–≤–µ—Ç, {}!\n\n".format(update.message.from_user.full_name) + \
                 "–Ø - –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–æ–≤, Poet's assistant.\n" + \
                 "–¢–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–º—É - –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä <i>—Å–∏–Ω–∏–µ –≥–ª–∞–∑–∞</i>, " + \
                 "–∏ —è —Å–æ—á–∏–Ω—é —Å—Ç–∏—Ö –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ\n\n" + \
                 "–ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –∑–∞–¥–∞–≤–∞—Ç—å –ø–æ–ª–Ω—É—é  —Å—Ç—Ä–æ–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä <i>–ë—É—Ä—è –º–≥–ª–æ—é –Ω–µ–±–æ –∫—Ä–æ–µ—Ç</i>, —è –ø–æ–ø—Ä–æ–±—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç –Ω–µ–µ.\n\n" + \
                 "–õ–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é —Ç–µ–º—É - —Å–º. –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.\n" + \
                 "–ö–Ω–æ–ø–∫–∞ [<b>–ï—â—ë</b>] –≤—ã–≤–µ–¥–µ—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ç–∏—Ö–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. –ö–Ω–æ–ø–∫–∞ [<b>–ù–æ–≤–∞—è —Ç–µ–º–∞</b>] –≤—ã–≤–µ–¥–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ö–Ω–æ–ø–∫–∞ [<b>–ò—Å—Ç–æ—Ä–∏—è</b>] –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–º—ã –∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è!"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ü–∏—é —Å–∞–¥–∂–µ—Å—Ç–æ–≤ (–æ–±—ã—á–Ω–æ 3 —à—Ç—É–∫–∏) –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä
    seeds = seed_generator.generate_seeds(user_id, domain=user_format.get(user_id))
    keyboard = [seeds]
    reply_markup = ReplyKeyboardMarkup(keyboard,
                                       one_time_keyboard=True,
                                       resize_keyboard=True,
                                       per_user=True)

    context.bot.send_message(chat_id=update.message.chat_id, text=intro_text, reply_markup=reply_markup,
                             parse_mode='HTML')
    logging.debug('Leaving START callback with user_id=%s', user_id)


def echo_on_error(context, update, user_id):
    chat_id = update.callback_query.message.chat_id if update.callback_query else update.message.chat_id
    keyboard = [seed_generator.generate_seeds(user_id, domain='–ª–∏—Ä–∏–∫–∞')]
    reply_markup = ReplyKeyboardMarkup(keyboard,
                                       one_time_keyboard=True,
                                       resize_keyboard=True,
                                       per_user=True)

    context.bot.send_message(chat_id=chat_id,
                             text=render_error_html(
                                 '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ—ç—Ç–æ–º—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é.'),
                             reply_markup=reply_markup, parse_mode='HTML')
    return


def show_history(update, context):
    user_id = get_user_id(update)
    history = get_user_history_db(user_id)

    if not history:
        context.bot.send_message(chat_id=update.message.chat_id, text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    keyboard = []
    for idx, (topic, poem, timestamp) in enumerate(history, start=1):
        keyboard.append([InlineKeyboardButton(f"{idx}. {topic}", callback_data=f"show_poem_{idx}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=reply_markup)


def handle_callback(update, context):
    query = update.callback_query
    user_id = get_user_id(update)
    callback_data = query.data

    if callback_data.startswith("show_poem_"):
        idx = int(callback_data.split("_")[-1]) - 1
        history = get_user_history_db(user_id)
        if 0 <= idx < len(history):
            poem = history[idx][1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∏—Ö–∞
            query.edit_message_text(text=render_poem_html(poem), parse_mode='HTML')
        else:
            query.edit_message_text(text="–û—à–∏–±–∫–∞: —Å—Ç–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif callback_data.startswith("continue_topic_"):
        idx = int(callback_data.split("_")[-1]) - 1
        history = get_user_history_db(user_id)
        if 0 <= idx < len(history):
            topic = history[idx][0]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
            query.edit_message_text(text=f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: {topic}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            context.user_data['current_topic'] = topic
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            echo(update, context)
        else:
            query.edit_message_text(text="–û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

def show_history(update, context):
    user_id = get_user_id(update)
    history = get_user_history_db(user_id)

    if not history:
        context.bot.send_message(chat_id=update.message.chat_id, text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    keyboard = []
    for idx, (topic, poem, timestamp) in enumerate(history, start=1):
        keyboard.append([
            InlineKeyboardButton(f"{idx}. {topic}", callback_data=f"show_poem_{idx}"),
            InlineKeyboardButton(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å {idx}", callback_data=f"continue_topic_{idx}")
        ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=reply_markup)


def echo(update, context):
    try:
        user_id = get_user_id(update)
        format = '–ª–∏—Ä–∏–∫–∞'

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –∏–∑ callback –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.callback_query:
            # –ï—Å–ª–∏ —ç—Ç–æ callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_query
            chat_id = update.callback_query.message.chat_id
            message_text = context.user_data.get('current_topic', '')
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ message
            chat_id = update.message.chat_id
            message_text = update.message.text

        if message_text == NEW:
            last_user_poem[user_id] = None
            last_user_poems[user_id] = []

            keyboard = [seed_generator.generate_seeds(user_id, domain=format)]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True, per_user=True)
            context.bot.send_message(chat_id=chat_id,
                                     text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é",
                                     reply_markup=reply_markup)
            return

        if message_text == LIKE:
            if user_id not in last_user_poem:
                echo_on_error(context, update, user_id, format)
                return

            poem = last_user_poem[user_id].replace('\n', ' | ')
            logging.info('LIKE: poem="%s" user="%s"', poem, user_id)

            if len(last_user_poems[user_id]):
                keyboard = [[NEW, MORE]]
            else:
                keyboard = [[NEW]]

            reply_markup = ReplyKeyboardMarkup(keyboard,
                                               one_time_keyboard=True,
                                               resize_keyboard=True,
                                               per_user=True)

            context.bot.send_message(chat_id=chat_id, text="‚ô°‚Äß‚ÇäÀö –ø—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å https://forms.gle/61npzsn7TWuaH8sF8 ‚ô°‚Äß‚ÇäÀö", reply_markup=reply_markup)
            return

        if message_text == DISLIKE:
            if user_id not in last_user_poem:
                echo_on_error(context, update, user_id, format)
                return

            poem = last_user_poem[user_id].replace('\n', ' | ')
            logging.info('DISLIKE: poem="%s" user="%s"', poem, user_id)

            if len(last_user_poems[user_id]):
                keyboard = [[NEW, MORE]]
            else:
                keyboard = [[NEW]]

            reply_markup = ReplyKeyboardMarkup(keyboard,
                                               one_time_keyboard=True,
                                               resize_keyboard=True,
                                               per_user=True)

            context.bot.send_message(chat_id=chat_id, text="–ü–æ–Ω—è—Ç–Ω–æ. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å—è. –ü—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å https://forms.gle/61npzsn7TWuaH8sF8",
                                     reply_markup=reply_markup)
            return

        if message_text == MORE:
            # –í—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ

            if user_id not in last_user_poem or len(last_user_poems[user_id]) < 1:
                echo_on_error(context, update, user_id)
                return

            poem = last_user_poems[user_id][-1]

            last_user_poem[user_id] = poem
            last_user_poems[user_id] = last_user_poems[user_id][:-1]

            if len(last_user_poems[user_id]):
                keyboard = [[LIKE, DISLIKE, MORE, NEW]]
            else:
                keyboard = [[LIKE, DISLIKE], seed_generator.generate_seeds(user_id, domain=format)]

            reply_markup = ReplyKeyboardMarkup(keyboard,
                                               one_time_keyboard=True,
                                               resize_keyboard=True,
                                               per_user=True)

            context.bot.send_message(chat_id=chat_id,
                                     text=render_poem_html(last_user_poem[user_id]),
                                     reply_markup=reply_markup, parse_mode='HTML')

            return

        if message_text == HISTORY:
            show_history(update, context)
            return

        seed = message_text
        logging.info('Will generate a poem using seed="%s" for user="%s" id=%s in chat=%s', seed,
                     update.callback_query.from_user.name if update.callback_query else update.message.from_user.name,
                     user_id, str(chat_id))

        temperature = 1.0
        max_temperature = 1.6
        while temperature <= max_temperature:
            ranked_poems = long_poetry_generator.generate_poems(topic=seed,
                                                                temperature=temperature, top_p=top_p, top_k=top_k,
                                                                typical_p=typical_p,
                                                                num_return_sequences=5)
            poems2 = [('\n'.join(lines), score) for lines, score in ranked_poems]

            if len(poems2) > 0:
                break

            temperature *= 1.1
            logging.info('Rising temperature to %f and trying again with seed="%s" for user="%s" id=%s in chat=%s',
                         temperature, seed, update.callback_query.from_user.name if update.callback_query else update.message.from_user.name,
                         user_id, str(chat_id))

        if len(poems2) == 0:
            logging.info('Could not generate a poem for seed="%s" for user="%s" id=%s in chat=%s', seed,
                         update.callback_query.from_user.name if update.callback_query else update.message.from_user.name,
                         user_id, str(chat_id))

        last_user_poems[user_id] = []
        last_user_poem[user_id] = None

        for ipoem, (poem, score) in enumerate(poems2, start=1):
            if ipoem == 1:
                last_user_poem[user_id] = poem
            else:
                last_user_poems[user_id].append(poem)

        if last_user_poem[user_id]:
            if len(last_user_poems[user_id]):
                keyboard = [[LIKE, DISLIKE, MORE, NEW, HISTORY]]
            else:
                keyboard = [[LIKE, DISLIKE, HISTORY], seed_generator.generate_seeds(user_id, domain=format)]

            reply_markup = ReplyKeyboardMarkup(keyboard,
                                               one_time_keyboard=True,
                                               resize_keyboard=True,
                                               per_user=True)

            context.bot.send_message(chat_id=chat_id,
                                     text=render_poem_html(last_user_poem[user_id]),
                                     reply_markup=reply_markup, parse_mode='HTML')

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_history_db(user_id, seed, last_user_poem[user_id])
        else:
            keyboard = [seed_generator.generate_seeds(user_id, domain=format)]
            reply_markup = ReplyKeyboardMarkup(keyboard,
                                               one_time_keyboard=True,
                                               resize_keyboard=True,
                                               per_user=True)

            context.bot.send_message(chat_id=chat_id,
                                     text='–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ—á–∏–Ω–∏—Ç—å üòû\n–ó–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
                                     reply_markup=reply_markup)

    except Exception as ex:
        logging.error('Error in "echo"')
        logging.error(ex)
        logging.error(traceback.format_exc())
        echo_on_error(context, update, user_id)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Verslibre generator')
    parser.add_argument('--token', type=str, default='', help='Telegram token')
    parser.add_argument('--mode', type=str, default='console', choices='console telegram'.split(),
                        help='Frontend selector')
    parser.add_argument('--tmp_dir', default='../../tmp', type=str)
    parser.add_argument('--data_dir', default='../../data', type=str)
    parser.add_argument('--models_dir', default='../../models', type=str)
    parser.add_argument('--log', type=str, default='../../tmp/stressed_gpt_poetry_generation.{HOSTNAME}.{DATETIME}.log')

    args = parser.parse_args()
    mode = args.mode
    tmp_dir = os.path.expanduser(args.tmp_dir)
    models_dir = os.path.expanduser(args.models_dir)
    data_dir = os.path.expanduser(args.data_dir)

    init_logging(args.log, True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    for gpu in tf.config.experimental.list_physical_devices('GPU'):
        tf.config.experimental.set_memory_growth(gpu, True)
    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫
    seed_generator = SeedGenerator(models_dir)

    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∏—Ñ–º–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤
    logging.info('Loading the long poetry generation models from "%s"...', models_dir)
    long_poetry_generator = LongPoemGeneratorCore2('stressed_long_poetry_generator_medium')
    long_poetry_generator.load(models_dir, data_dir, tmp_dir)

    if args.mode == 'telegram':
        telegram_token = args.token
        if len(telegram_token) == 0:
            telegram_token = getpass.getpass('Enter Telegram token:> ').strip()

        logging.info('Starting telegram bot')
        tg_bot = telegram.Bot(token=telegram_token).getMe()
        bot_id = tg_bot.name
        logging.info('Telegram bot "%s" id=%s', tg_bot.name, tg_bot.id)

        updater = Updater(token=telegram_token)
        dispatcher = updater.dispatcher

        start_handler = CommandHandler('start', start)
        dispatcher.add_handler(start_handler)

        echo_handler = MessageHandler(Filters.text & ~Filters.command, echo)
        dispatcher.add_handler(echo_handler)

        callback_handler = CallbackQueryHandler(handle_callback)
        dispatcher.add_handler(callback_handler)

        logging.getLogger('telegram.bot').setLevel(logging.INFO)
        logging.getLogger('telegram.vendor.ptb_urllib3.urllib3.connectionpool').setLevel(logging.INFO)
        logging.info('Start polling messages for bot %s', tg_bot.name)
        updater.start_polling()
        updater.idle()
    else:
        print('–í–≤–æ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n')

        while True:
            topic = input(':> ').strip()

            ranked_poems = long_poetry_generator.generate_poems(topic=topic,
                                                                temperature=1.0, top_p=top_p, top_k=top_k,
                                                                typical_p=typical_p,
                                                                num_return_sequences=5)
            if not ranked_poems:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏—Ö–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É.")
                continue

            for poem, score in ranked_poems:
                print('\nscore={}'.format(score))
                for line in poem:
                    print(line)
                print('-' * 50)